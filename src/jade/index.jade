doctype html(lang='en')
head
	meta(charset='utf-8')
	title Modern Web A11y Workshop - John Slatin Access U 2015
	script(src='bower_components/webcomponentsjs/webcomponents.js')
	link(rel='import', href='bower_components/slide-deck/a-slide-deck.html')
	link(rel='import', href='bower_components/slide-deck/a-slide.html')
	link(rel='import', href='bower_components/slide-deck/code-block.html')
	link(rel='import', href='elements/flex-grid.html')
	link(rel='import', href='elements/flex-line.html')
	link(rel='stylesheet', href='css/theme.css')
	-demo_base_url = "http://localhost:3001/"
body(is='a-slide-deck', unresolved='')
	div
	a-slide.start
		h1 Modern Web A11y Workshop
		h3(style='margin-top:-.4em; font-weight:400') John Slatin Access U 2015
		p
			p Patrick Fox
			a(href='http://github.com/patrickfox', target='_blank') github.com/patrickfox
			br
			a(href='http://twitter.com/patrickfox', target='_blank') @patrickfox
			br
			a(href='http://twitter.com/razorfish', target='_blank') @razorfish
			br
			a(href='http://twitter.com/search?q=%23moderna11y', target='_blank') #moderna11y
	a-slide(data-state="intro")
		h2 Introduction

	a-slide
		h3 Overview
		ul
			li Introduction - 8:30 am (15 min)
			li Tools and Techniques - 8:45 am (1 hr)
				//- ul
				//- 	li Focus Management
				//- 	li Announcing Content
				//- 	li UI Isolation and Tab Fence
				//- 	li Alternate Copy and Labelling
				//- 	li Icon Fonts

			li Quick Break - 9:45 am (15 min)
			li Implementing Accessibility - 10:00 am (90 min)
				//- ul
				//- 	li Focus Management
				//- 	li Announcing Content
				//- 	li UI Isolation and Tab Fence
				//- 	li Alternate Copy and Labelling
				//- 	li Icon Fonts
			li Deep Dive: Responsive Menus - 11:30 am (15 min)


	a-slide
		h3 So, what is this workshop about?
		ul
			li(part='') Modern accessibility challenges and solutions
			li(part='') Design and technical considerations and best practices
			li(part='') Terminology for modern accessibility techniques
			li(part='') Engaging and efficient web UX for people of all abilities

	a-slide
		h3 Terminology
		flex-line
			div(flex='')
				ul
					li(part='') #[strong a11y] = accessibility
					li(part='') #[strong AT] = assistive technology
					li(part='') #[strong Screen reader] = software that interprets code and reads content
					li(part='') #[strong WAI-ARIA] = W3C technical spec, enables modern a11y
					li(part='') #[strong WCAG2] = W3C a11y guidelines, v2
			div(flex='')
				ul
					li(part='') #[strong Rehabilitation Act(1973), Section 508] = provides electronic a11y guidelines for US government vendors
					li(part='') #[strong Americans w/Disabilities Act (ADA, 1990)] = law, prohibits discrimination
	a-slide
		h3 A11y is important
		ul
			li(part='') #[strong Companies:] Legal, brand risks
			li(part='') #[strong People w/disabilities:] Independence, dignity
			li(part='') #[strong A11y is an equality and civil rights issue]
			li(part='') #[strong A11y benefits everyone:]
				ul
					li temporary disabilities
					li curb cuts, door openers
		div(part='')
			p 
				em "When we work on making our devices accessible by the blind, I don't consider the bloody ROI".
			p - Tim Cook, Apple CEO

	a-slide
		h3 Compliance vs. Usability
		ul
			li(part='') "Standards compliant" is not good enough
			li(part='') Make experiences user-friendly for people of all abilities
			li(part='') "Create beautiful, elegant, accessible, innovative web experiences"
		div(part='') 
			p
				em "Accessibility is usability in context of disability"
			p - Jan Eric Hellbusch, #[a(href="http://bit.ly/a11y-is-usability" target='a11yusability') bit.ly/a11y-is-usability ]
		div(part='') 
			p
				em "Empathy encourages you to understand who uses your product, forces you ask deeper questions and motivates the many redesigns you go through to get a product right."
			p - Scott Jensen, #[a(href="http://bit.ly/a11y-empathy" target='empathy') bit.ly/a11y-empathy ]

	a-slide
		h3 Screen Readers
		flex-line
			div(flex='')
				ul
					li(part='') Speak document content
					li(part='') Provide navigation tools
						ul
							li Headings
							li Landmarks
							li Forms and form fields
							li Links, buttons
							li Element by element
			div(flex='')
				ul
					li(part='') Support for a11y features varies
					li(part='') Recommended Browser/Screen Reader Combos:
						ul
							li NVDA / Firefox (Windows)
							li JAWS / IE (Windows)
							li VoiceOver / Safari (MacOS/iOS)
							li TalkBack / Firefox (Android)
	a-slide
		h3 Screen Reader Stats
		flex-line
			div(flex='', part='')
				h4 Desktop
				ul
					li JAWS(Win) ~50%, mostly in US
					li NVDA(Win) ~20%, higher in EU
					li VoiceOver(MacOS) ~10%
			div(flex='', part='')
				h4 Mobile
				ul
					li VoiceOver(iOS) ~60%, higher in US
					li Talkback(Android) ~20%
		p(part) Source: #[a(href="http://webaim.org/projects/screenreadersurvey5/", target="webaim") WebAIM.org Screen Reader Survey 5]
	a-slide
		h3 ARIA Makes Modern A11y Possible
		h4 What makes accessible, modern web UI so challenging?
		ul
			li(part='') Dynamic UI: content updates, state changes not communicated
			li(part='') Custom UI: role and purpose of non-native widgets
			li(part='') ARIA helps bridge this gap
				ul
					li Live region: #[code aria-live]
					li States: #[code aria-enabled], #[code aria-selected] 
					li Roles: #[code role="dialog"] 
	a-slide
		h3 Modern A11y Goals and Tips
		flex-line
			div(flex='')
				ul
					li(part='') Create lean, elegant, robust technical solutions
					li(part='') Minimize use of ARIA - rely on semantic code first
					li(part='') Aim for widest screen reader/browser support possible
					li(part='') Test often - don't wait until the end
					li(part='') Developers and QA peeps should be screen reader experts
			div(flex='')
				ul
					li(part='') Make accessibility easier, repeatable
					li(part='') Make a11y a core part of every step of project lifecycle
					li(part='') Accessibility is a team effort
					li(part='') Be wary of "accessible" frameworks - test for yourself, improve
					li(part='') Give back - share what you know, report issues


	a-slide(data-state="intro")
		h2 Tools and Techniques

	a-slide
		h3 Focus Management
		h4 Managing where focus is and avoiding the loss of focus

		p(part='') Tips:
		ul
			li(part='') Manage focus only to improve understanding, avoid frustration
			li(part='') Focusing on an element reads its contents or label
			li(part='') Only natively focusable elements or elements w/#[code tabindex] can receive focus
		a(part='' href='http://americanexpress.com/', target="tabnidex") Tabindex Anti-pattern Example →

	a-slide
		h3 Using Tabindex

		p(part='') Tips:
			li(part='') Hard coding #[code tabindex] can be problematic
			li(part='') #[strong Do not use] #[code tabindex="{&gt;=0}"]
			li.strong(part='') Use a script to dynamically manage focus&hellip;

	a-slide(data-state="#access")
		h3 Focus on anything w/ $.access()
		h4 How it works:
		ul
			li(part="") Adds #[code tabindex="-1"]
			li(part="") Places focus on the target element
			li(part="") On #[code focusout], tabindex and event listeners are removed

	a-slide(data-state="#access")
		h3 Using $.access()
			h4 Example Usage:
			ul
				li Focused item is no longer available
				li Modals
				li Single-page app view updates


			code-block(language='javascript')
				| 
				| 	$("#home_section").access(); //→ places focus on the element

				| 
				| 	$("#home_section").access(true); //→ places focus before the element
				| 
			a(href='http://bit.ly/a11y_access', target="access") $.access() in action →

	a-slide
		h3 Announcing Content
		h4 Live regions automatically speak content updates
		p Use cases:
		ul
			li alerts
			li errors
			li notifications
			li any pertinent update
	a-slide
		h3 Announcing Content
		h4 Implementation:
		code-block(language="html")
			| 
			| 		# aria-live={polite || assertive}
			|		<section aria-live="polite">...</section>
			| 
			| 		# log is shorthand for aria-live="polite"
			|		<section role="log">...</section>
			| 
			| 		# alert is shorthand for aria-live="assertive"
			|		<section role="alert"></section>
			| 
			| 		# status is shorthand for aria-live="polite"
			|		<section role="status"></section>
			| 
	a-slide(data-state="lotr")
		h3 One Live Region To Rule Them All
		div(part='')
			h4 Live region pitfalls:
			ul
				li Multiple live regions cumbersome to manage
				li Live region roles(status, alert, log, timer) don't work reliably
				li Ad-hoc live region use adds complexity, risk
		div(part='')
			h4 Best practices:
			ul
				li Use only ONE live region in your entire site/app
				li Use a script to announce content&hellip;
	a-slide
		h3 Say Anything w/$.announce()
		h4 How it works:
		ul
			li Create common @aria-live “announcer” element
			li Announcer needs to be in DOM on page load and left alone
			li Reset technique allows repeat announcements
		a(href="http://jsfiddle.net/pfox/ou11fr9p/show", target="_blank") Live Region Example →
		br
		a(href="http://bit.ly/a11y_kit", target="_blank") A11y Kit Library →

	a-slide
		h3 Isolate and Tab Fence
		h4 Temporarily isolate user action/focus to specified area of UI
		ul
			li #[strong Isolation] uses #[code aria-hidden] to hide page content
			li #[strong Tab Fence] listens for focus on page, returns focus to isolated UI
		h4 Usage:
		ul
			li(part='') Modals
			li(part='') In-page, multi-step process
	//- a-slide
	//- 	h3 Complex UI
	//- 	ul
	//- 		li(part='') Overly complex for AT users === overly complex for everyone
	//- 		li(part='') Don't try to do too much in one view
	//- 		li(part='') Provide extra help where needed
	a-slide
		h3 Alternate Copy and Labeling
		h4 Additional non-visual copy used to improve accessibility

		flex-line
			div(part='', flex='')
				h4 Uses:
				ul 
					li Summarizing complex copy
					li Translating visual cues to spoken cues
					li Providing additional content to improve meaning
			div(part='', flex='')
				h4 Tips:
				ul
					li Labeled elements are usually interactive
					li Minimize use of alternate content
	a-slide
		h3 Alternate Copy and Labeling
		h4 Techniques:
		ul
			li #[code aria-label="alternate copy"] - works well on buttons
			li #[code aria-labelledby="id/id's"] - associate existing content to an element
			li #[code aria-describedby="id/id's"] - additional descriptive content
			li #[code .visuallyhidden] CSS technique - can be problematic on iOS
			li #[code title] - not reliable, don't use!
	a-slide
		h3 Alternate Copy and Labeling
		h4 Implementation:
		code-block(language='html')
			| 
			|		<button aria-label="Edit email">Edit</button>
			|         #label an element using another element's copy
			|		&lt;div aria-labelledby="some_id another_id third_id">
			|         #additional descriptive content
			|		&lt;label for="first_name">First Name&lt;/label>
			|		&lt;input id="first_name" aria-describedby="visual_descriptive_text" type="text" />
			|		&lt;span>Please provide your full legal first name&lt;/span>
			| 

	a-slide
		h3 Responsive Design Considerations
		h4 Common codebase === more testing, more complexity
		ul
			li(part='') Avoid overly complex UI changes - keep content flow the same
			li(part='') Touch gestures require accessible equivalent
			li(part='') Manage state and functionality changes w/JS (e.g. CSS transitions)
			li(part='') Minimize swipes on mobile - simplify and use semantic markup
			li(part='') #[code aria-hidden="false"] breaks iOS VO
			li(part='') Test each break point&hellip;

	a-slide
		h3 CSS Pseudo Elements
		h4 Content via CSS (:before, :after)
		h4(part='') Tips:
		ul
			li(part='') Screen readers support and read CSS content
			li(part='') Do not use with pertinent content
			li(part='') Great for icon fonts, but be careful...
				ul
					li Icon fonts rely on Unicode character mapping
					li MacOS VO used to read some Unicode characters as an audible beep
					li #[a(href='https://vimeo.com/120737667', target='_blank') Some Unicode characters map to emoji →]
					li Use a service like #[a(href='https://icomoon.io/', target='icomoon') Icomoon]
	a-slide
		h3 Icon Fonts
		h4 Implementation:
		code-block(language="html")
			| 
			|          #works but with audible "beep" and "alien" sign in VO
			| 		<a href="..." class="icon external" target="_blank">External link</a>
			| 
			|          #better - use a span(aria-hidden=true) to hide from screen readers
			| 		<a href="..." class="icon external" target="_blank">
			|			**<span aria-hidden="true"></span>**
			|                   External link
			|		</a>
			| 
		code-block(language="css")
			| 
			| 		.icon.external span:after
			|			content: "\e622"
			|			speak: none &lt;-- wishful thinking :(
			| 

	a-slide(data-state="intro")
		h2 Implementing A11y


	a-slide
		h3 "Semantic" Markup
		h4 Semantic markup is the foundation of a11y, but...
		ul
			li(part='') Generic tags are sometimes better, less verbose
			li(part='') Most important: How is markup spoken?
			li(part='') Test options, use what sounds best
			li(part='') Examples:
				ul
					li(part='') HTML5 sectioning elements spoken as landmarks
					li(part='') Use buttons &amp; anchors vs. generic elements
					li(part='') UL/LI for true list content ONLY
					li(part='') DL/DD/DT are overly verbose
	a-slide
		h3 Headings
		h4 Headings are crucial to page navigation and content hierarchy
		ul
			li(part='') UX team should determine heading strategy
			li(part='') Headings describe sections or groups of content
			li(part='') Order should not increase by more than 1
			li(part='') Don't overuse
			li(part='') Don't put links/buttons in headings
	a-slide(data-state='map')
		h3 Landmarks
		h4 Landmarks improve navigation and understanding of page structure
		table(part='')
			thead
				tr
					th Role
					th HTML Tag
					th Usage
					th Notes
			tbody
				tr.hl
					td banner
					td #[code &lt;header role="banner"&gt; ]
					td once per view
					td Page header
				tr.hl
					td main
					td #[code &lt;main role="main"&gt; ]
					td once per view
					td Main content area
				tr.hl
					td contentinfo
					td #[code &lt;footer role="contentinfo"&gt; ]
					td once per view
					td Page footer
				tr
					td search
					td -
					td multiple
					td Search form
				tr
					td form
					td -
					td multiple
					td Don't use unless a form plays a significant role in page
				tr
					td navigation
					td #[code &lt;nav role="navigation"&gt; ]
					td multiple
					td Use with label/heading
				tr
					td complementary
					td #[code &lt;aside role="complementary"&gt; ]
					td multiple
					td Use with label/heading
				tr
					td application
					td -
					td !avoid
					td
		//p(data-state='highlight-landmarks', part='')
	a-slide(data-state='map')
		h3 Landmark Usage
		h4 At a minimum, all pages should have:
		ul(part='')
			li banner  - #[code &lt;header role="banner"&gt; ]
			li main - #[code &lt;main role="main"&gt; ]
			li contentinfo - #[code &lt;footer role="contentinfo"&gt; ]
		p(part='') #[strong Goal:] ensure that all content resides in a landmark region and, in doing so, no content is orphaned 

	a-slide(data-state='map')
		h3 Landmark Tips
		h4 
		ul
			li(part='') Create a landmark strategy, use it consistently
			li(part='') Use labels for generic landmarks (e.g. navigation, complementary)
			li(part='') Some HTML5 sectioning elements are landmarks by default
			li(part='') Use HTML5 element <em>and</em> role
			li(part='') Don't overuse
		code-block(language="html")
			| 
			|          # examples
			|		<section role="complementary" aria-labelledby="module_heading">
			|			<h2 id="module_heading">Frequently Asked Questions</h2>
			|		</section>
			|		<header role="banner"></header>
			|		<footer role="presentation"></footer>
			|		<main role="main"></main>
			| 

	a-slide
		h3.jsmvc Single Page Architecture
		h4 Intial page load, subsequent dynamic view updates via Ajax
		p(part='') #[strong Problem:] No page refresh - screen reader unaware of view updates
		p(part='') #[strong Solution:] Emulate native refresh, $.announce() status updates on view loaded
		div(part='')
			ul
				li Update page title from view to view
				li $.announce() "{new title} view loaded" on view loaded event
				//li $.access() new content
			a(href="http://patrickfox.github.io/" target="_blank") Accessible Single-Page App →
			br
			a(href="http://patrickfox.github.io/#/blog/screen-reader-page-load-behaviors.html" target="_blank") Screen reader page load behaviors →
	a-slide
		h3 Popup menus
		h4 Emulate native select menu states, behaviors and keyboard nav
		flex-line
			div(flex='', part='')
				h4 Button:
				ul
					li #[code aria-haspopup=true]
					li #[code aria-controls={id of menu}]
					li #[code aria-expanded={true|false}]
			div(flex='', part='') 
				h4 Menu:
				ul
					li keyboard navigation: up/down moves through menu options
					li ESC closes menu, place focus back on button
					li Use #[code role=“menuitem”] on menu item buttons
		a(href="http://patrickfox.github.io/#/blog/accessible-popup-menus.html" target="_blank") Popup Menu Example →
	//- a-slide
	//- 	h3 Accordion Content - TODO
	//- 	flex-line
	//- 		div(flex='')
	//- 			h4 Button:
	//- 			ul
	//- 				li aria-haspopup=true
	//- 				li aria-controls={id of menu}
	//- 				li aria-expanded={true|false}
	//- 		div(flex='') 
	//- 			h4 Container:
	//- 			ul
	//- 				li when collapsed, must be display:none to completely hide contents	a-slide
	//- a-slide
	//- 	h3 Dynamic Messages
	//- 	h4 Inline messages provide confirmation, informational or alert messaging
	//- 	flex-line
	//- 		div(flex='')
	//- 			h4 Button:
	//- 			ul
	//- 				li aria-haspopup=true
	//- 				li aria-controls={id of menu}
	//- 				li aria-expanded={true|false}
	//- 		div(flex='') 
	//- 			h4 Container:
	//- 			ul
	//- 				li when collapsed, must be display:none to completely hide contents
	//- 				li don't rely on #[code aria-hidden] alone
	a-slide
		h3 Modals
		h4 Example usage:
		ul
			li user-initiated prompt (e.g. confirmation of action)
			li system-initiated prompt (e.g. timeout warning)
	a-slide
		h3 Modals
		h4 Creating accessible modals
		flex-line
			div(flex='', part='')
				h4 Modal setup:
				ul
					li start heading order with H1
					li use #[code aria-labelledby] to label modal
					li add #[code role=dialog] to container
			div(flex='', part='')
				h4 On open:
				ul
					li focus on first focusable element
					li isolate modal UI from view content
					li dialog is announced
					li listen for escape key to close
		div(part='')
			h4 On close:
			ul
				li return focus to button, last focused or main content
			a(href='http://patrickfox.github.io/#/blog/accessible-modals', target='modal_example') Modal example →
	a-slide
		h3 Modals
		h4 UI Isolation Detail
		code-block(language="html")
			| 
			| 		&lt;body>
			|		    <div data-isolate class="shell" aria-hidden="true">
			|              #all main page content lives here
			|			</div>
			|              #modals live at body end, hidden until activated
			|		    <section data-modal-id="test_modal" role="dialog">...</section>
			|		&lt;/body>
			| 
		p How it works:
		ul
			li(part='') main content lives in container
			li(part='') #[code aria-hidden] the page content
			li(part='') focus listener - on page focus returns focus to modal
	a-slide
		h3 Tooltips
		h4 Tooltips contain succinct, non-interactive information
		h4 Example interactions:
		ul
			li form fields: display and read content on field interaction
			li button: display and read content on focus

	a-slide
		h3 Tooltips
		h4 Tooltip setup
		code-block(language="html")
			| 
			|          //button
			| 		<button type="button" role="tooltip" aria-labelledby="tooltip_21"></button>
			| 
			|          //container
			| 		<div id="tooltip_21">This is a tooltip</div>
			| 
		ul
			li on button focus/blur, tooltip opens/closes
			li tooltip contents are read upon button interaction
		a(href="http://patrickfox.github.io//#/blog/accessible-tooltips.html" target="_blank") Tooltip demo →
	a-slide
		h3 Inline Form Validation
		p Problem: Inline, dynamic errors not readily understood, communicated
		div(part='')
			h4 Tips:
			ul
				li Leverage field #[code label] to report error messaging
				li Visual error is aria-hidden
				li Place focus in first invalid field on submit
				li Announce errors politely
				li Use ARIA to communicate states:
					ul
						li #[code @aria-invalid, @aria-required]

			a(href="https://citiretailservices.citibankonline.com/RSnextgen/svc/launch/index.action?siteId=PLCN_GOODYEAR&langId=en_US#signon" target="_blank") Form validation demo →

	a-slide(data-state="intro")
		h2 Deep Dive: Responsive Menus
	
	a-slide
		h3 Starbucks.com
		h4 Overall, site is pretty solid
		ul
			li Responsive
			li Accessible
			li A couple of things though...
		a(href="http://www.starbucks.com/", target="starbucks") Starbucks.com →

	a-slide
		h3 Starbucks.com
		div(part='')
			h4 Problem: hard coded tabindex causes issues
			ul
				li 6 #[code tabindex="0"] on main content areas
				li 4 #[code tabindex="-1"] on other areas
		div(part='')
			h4 Solution: #[a(href='http://bit.ly/a11y_kit') use $.access() to manage focus!]

	a-slide
		h3 Starbucks.com
		h4 Problem: Hidden menu items still navigable
		ul
			li CSS transitions used to animate menu height
			li Menu content is not visible but is still available
			li Timing is key: add #[code display:none;] to menus #[em after] CSS transition ends

	a-slide
		h3 Starbucks.com
		h4 Solution: Listen for #[code transitionend/webkitTransitionEnd] event on menu close
		ul
			li Event fires on end of CSS transition
			li Set menu display #[code display:none;]
			li #[strong Note:] removing CSS transitions will break menu toggle... 


	a-slide(data-state="intro")
		h2 Deep Dive: Summarizing Complex Content w/aria-labelledby
	
	a-slide
		h3 Outlook Web Client
		h4 Inbox UI
		ul
			li Email clients are complex
			li Lots of meta data
			li Potentially cumbersome to understand and navigate
		a(href='https://mail.publicisgroupe.net/owa/#path=/mail' target="owa") aria-labelledby example: Outlook web client →

	a-slide
		h3 Outlook Web Client
		h4 #[code aria-labelledby] to the rescue
		ul
			li Email messages are summarized succinctly
			li #[code aria-labelledby] is used to curate a summary
			li Use of descriptive helper text to provide additional meaning and clarity

	a-slide
		h3 Outlook Web Client
		h4 Implementation could be better...
		ul
			li Separate set of content and elements increases DOM size
			li DOM bloat could create performance issues
			li Best option: use #[code aria-label] to create text summary

	a-slide
		h3 Outlook Web Client
		h4 Summary
		ul
			li Use #[code aria-labelledby] to string together a message from visible content
			li Use #[code aria-label] for a static messages that differs from visible content
			li Above all: don't compromise web performance and code integrity for accessibility

	a-slide(data-state="intro")
		h2 Resources
	a-slide
		h3 Screen Reader Guides
		ul
			li JAWS Help: #[a(href='http://bit.ly/JAWS_Keystrokes', target='at_help') bit.ly/JAWS_Keystrokes]
			li NVDA Help: #[a(href='http://bit.ly/NVDA_Help', target='at_help') bit.ly/NVDA_Help]
			li VoiceOver Help: #[a(href='http://bit.ly/VO_Help', target='at_help') bit.ly/VO_Help]
	a-slide
		h3 Testing Tools
		h4 Automate testing where possible
		ul
			li FireEyes
			li #[a(href="http://www.tenon.io") Tenon.io]
	a-slide
		h3 Demos
		ul
			li $.access() demo - #[a(href='http://bit.ly/a11y_access', target='access') bit.ly/a11y_access]
			li $.announce() demo - #[a(href='http://bit.ly/a11y_say_anything', target='announce') bit.ly/a11y_say_anything]
			li Other demos - #[a(href='http://bit.ly/moderna11y_demos', target='demos') bit.ly/moderna11y_demos]

	a-slide(data-state="intro")
		h2 Summary

	a-slide
		h3 Cheat Sheet
		ul
			li Announce and access your modern UI w/a11y_kit
				ul
					li Don't hard code #[code tabindex] - use #[code $.access()] to manage focus
					li One live region for your app - use #[code $.announce()]
			li Use #[code aria-labelledby] to summarize complex content
			li Keep your code lean
			li Minimize use of ARIA and alternate copy
			li Maximize foundation of semantic markup, and solid design and content strategy

	a-slide
		h3 Cheat Sheet
		ul
			li Create a landmark and heading strategy
			li Single-page apps: Announce view updates
			li Modals: Use isolation and tab fence techniques
			li Use CSS3 transitions and #[code transistionend]
			li Share what you learn! Contribute!
	a-slide(data-state="intro")
		h2 Questions, Comments?
		//- p Feedback on this workshop: 
		//- 	a(href="bit.ly/moderna11y_survey") bit.ly/moderna11y_survey
	a-slide(data-state="intro")
		h2 Thanks!
		p
			a(href='http://github.com/patrickfox', target='_blank') github.com/patrickfox
			br
			a(href='http://twitter.com/patrickfox', target='_blank') @patrickfox
			br
			a(href='http://twitter.com/razorfish', target='_blank') @razorfish
			br
			a(href='http://twitter.com/search?q=%23moderna11y', target='_blank') #moderna11y


	footer(role="contentinfo")
		span 
			a(href="/") Home



