doctype html(lang='en')
head
	meta(charset='utf-8')
	title ???
	script(src='bower_components/webcomponentsjs/webcomponents.js')
	link(rel='import', href='bower_components/slide-deck/a-slide-deck.html')
	link(rel='import', href='bower_components/slide-deck/a-slide.html')
	link(rel='import', href='bower_components/slide-deck/code-block.html')
	link(rel='import', href='elements/flex-grid.html')
	link(rel='import', href='elements/flex-line.html')
	link(rel='stylesheet', href='css/theme.css')
	-demo_base_url = "http://localhost:3001/"
body(is='a-slide-deck', unresolved='')
	div
	a-slide.start
		h1 Modern Web A11y
		h3(style='margin-top:-.4em; font-weight:400') OSCON PDX 2015 (#[a(href='https://twitter.com/hashtag/ID24') #moderna11y])
		p
			p Patrick Fox
			a(href='http://github.com/patrickfox', target='_blank') github.com/patrickfox
			br
			a(href='http://twitter.com/patrickfox', target='_blank') @patrickfox
			br
			a(href='http://twitter.com/razorfish', target='_blank') @razorfish
	a-slide
		h3 Agenda
		ul
			li Introduction 
			li Modern Web UI Challenges
			li Focus Management
			li 
	
	a-slide(data-state="intro")
		h2 Introduction

	a-slide
		h3 So, what is this presentation about?
		ul
			li(part='') Modern accessibility challenges and solutions
			li(part='') Design and technical considerations and best practices
			li(part='') Terminology for modern accessibility techniques
			li(part='') Engaging and efficient web UX for people of all abilities

	a-slide
		h3 Terminology
		flex-line
			div(flex='')
				ul
					li(part='') #[strong a11y] = accessibility
					li(part='') #[strong AT] = assistive technology
					li(part='') #[strong Screen reader] = software that interprets code and reads content
					li(part='') #[strong WAI-ARIA] = W3C technical spec, enables modern a11y
					li(part='') #[strong WCAG2] = W3C a11y guidelines, v2

	a-slide
		h3 Compliance vs. Usability
		ul
			li(part='') "Standards/WCAG compliant" is not good enough
			li(part='') Make experiences user-friendly for people of all abilities
			li(part='') "Create beautiful, elegant, accessible, innovative web experiences"
		div(part='') 
			p
				em "Accessibility is usability in context of disability"
			p - Jan Eric Hellbusch, #[a(href="http://bit.ly/a11y-is-usability" target='a11yusability') bit.ly/a11y-is-usability ]
		div(part='') 
			p
				em "Empathy encourages you to understand who uses your product, forces you ask deeper questions and motivates the many redesigns you go through to get a product right."
			p - Scott Jensen, #[a(href="http://bit.ly/a11y-empathy" target='empathy') bit.ly/a11y-empathy ]

	a-slide
		h3 Modern A11y Goals and Tips
		flex-line
			div(flex='')
				ul
					li(part='') Create lean, elegant, robust technical solutions
					li(part='') Minimize use of ARIA - rely on semantic code first
					li(part='') Aim for widest screen reader/browser support possible
					li(part='') Test often - don't wait until the end
					li(part='') Developers and QA peeps should be screen reader experts
			div(flex='')
				ul
					li(part='') Make a11y a core part of every step of project lifecycle
					li(part='') Accessibility is a team effort
					li(part='') Make accessibility easier, repeatable
					li(part='') Be wary of "accessible" frameworks - test for yourself, improve
					li(part='') Give back - share what you know, report issues


	a-slide(data-state="intro")
		h2 Modern Web UI Challenges

	a-slide
		h3 Dynamic UI
		p Common Functionality
		ul
			li Custom drop-down menus
			li Modals
			li Tooltips
			li Accordion content
			li Dynamic errors/notifications
	a-slide
		h3 AT doesn't recognize content/UI changes
		ul
			li Native HTML, JavaScript lack means to communicate DOM updates
			li Custom UI widget purpose and interactions not understood
			li Screen readers are geared towards static documents

	a-slide
		h3 ARIA Makes Modern A11y Possible
		ul
			li Live region: #[code aria-live]
			li States: #[code aria-enabled], #[code aria-selected]
			li Properties: #[code aria-haspopup]
			li Roles: #[code role="dialog"]
			li Relationships: #[code aria-labelledby], #[code aria-controls]

	a-slide
		h3 Announcing Content
		h4 Live regions automatically speak content updates
		p Use cases:
		ul
			li alerts
			li errors
			li notifications
			li any pertinent update
	a-slide
		h3 Announcing Content
		h4 Implementation:
		code-block(language="html")
			| 
			| 		# aria-live={polite | assertive | off}
			|		<div aria-live="polite">...</div>
			| 
			| 		# log is shorthand for aria-live="polite"
			|		<div role="log">...</div>
			| 
			| 		# alert is shorthand for aria-live="assertive"
			|		<div role="alert"></div>
			| 
			| 		# status is shorthand for aria-live="polite"
			|		<div role="status"></div>
			| 
	a-slide(data-state="lotr")
		h3 One Live Region To Rule Them All
		div(part='')
			h4 Live region pitfalls:
			ul
				li Multiple live regions cumbersome to manage
				li Ad-hoc live region use adds complexity, risk
				li Live region roles(status, alert, log, timer) don't work reliably
		div(part='')
			h4 Best practices:
			ul
				li Use only ONE live region in your entire site/app
				li Use a common script to announce content&hellip;
	a-slide
		h3 Say Anything w/$.announce()
		h4 How it works:
		ul
			li Create common @aria-live “announcer” element
			li Announcer needs to be in DOM on page load and left alone
			li Reset technique allows repeat announcements
		a(href="http://jsfiddle.net/pfox/ou11fr9p/show", target="_blank") Live Region Example →
		br
		a(href="http://bit.ly/a11y_kit", target="_blank") A11y Kit Library →


	a-slide(data-state="intro")
		h2 Single Page App A11y


	a-slide
		h3.jsmvc Single Page Architecture
		h4(part='') Intial page load, subsequent dynamic view updates via Ajax
		p(part='') #[strong Problem:] No page refresh - screen reader unaware of view updates
		p(part='') #[strong Solution:] Emulate native refresh, $.announce() status updates on view loaded
		div(part='')
			ul
				li Update page title from view to view
				li $.announce() "{new title} view loaded" on "view loaded/updated" event
				li Use $.access() to dynamically place focus on new content area
			a(href="http://localhost:3000/#/blog/screen-reader-page-load-behaviors.html" target="_blank") Screen reader page load behaviors →

	a-slide
		h3 Example: AngularJS
		ul
			li Update and announce title on #[code $viewContentLoaded]
		code-block(language="javascript")
			| 
			|     app.controller "PageCtrl", ($scope, $location, $http) -&gt;
			|         $scope.$on '$viewContentLoaded', announce_view_loaded
			|         ...
			| 

		a(href="http://localhost:3000/" target="_blank") Accessible Angular App →

	a-slide
		h3 Example: React
		ul
			li Update and announce title via #[code componentDidUpdate]
		code-block(language="javascript")
			| 
			|     componentDidUpdate: -&gt;
			|         //NOTE: make sure this is only called for *view* updates
			|         @make_announcement()
			|         @setPageScroll()
			| 
			|     make_announcement: (message) -&gt;
			|         message = message || @getViewUpdateMsg()
			|         $.announce(message, 'assertive')
			| 

	a-slide(data-state="intro")
		h2 Summary

	a-slide
		h3 Cheat Sheet
		ul
			li(part='') Minimize use of ARIA
			li(part='') Maximize foundation of semantic markup, and solid design and content strategy
			li(part='') Announce and access your modern UI w/a11y_kit, judiciously&hellip;
				ul
					li One live region for your app - use #[code $.announce()]
					li Don't hard code #[code tabindex] - use #[code $.access()] to manage focus
			li(part='') Keep your code lean and maintainable

	a-slide
		h3 Demos
		ul
			li $.announce() demo - #[a(href='http://bit.ly/a11y_say_anything', target='announce') bit.ly/a11y_say_anything]
			li $.access() demo - #[a(href='http://bit.ly/a11y_access', target='access') bit.ly/a11y_access]

	a-slide(data-state="intro")
		h2 Questions, Comments?
		//- p Feedback on this workshop: 
		//- 	a(href="bit.ly/moderna11y_survey") bit.ly/moderna11y_survey
	a-slide(data-state="intro")
		h2 Thanks!
		p
			a(href='http://github.com/patrickfox', target='_blank') github.com/patrickfox
			br
			a(href='http://twitter.com/patrickfox', target='_blank') @patrickfox
			br
			a(href='http://twitter.com/razorfish', target='_blank') @razorfish


	footer(role="contentinfo")
		span 
			a(href="/") Home



